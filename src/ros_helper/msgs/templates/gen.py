import ros_helper as rh

import actionlib_msgs.msg as act
import diagnostic_msgs.msg as diag
import geometry_msgs.msg as geo
import nav_msgs.msg as nav
import sensor_msgs.msg as sens
import std_msgs.msg as std
import visualization_msgs.msg as vis

def gen(mod, filename):
    print "Generating message classes for %s ..." % (mod.__name__),
    template_filename = "templates/%s" % filename
    filename = '%s/src/ros_helper/msgs/%s' % (rh.pathtools.pkg_path('ros_helper'), template_filename)
    fout = open(filename, 'w')
    fout.write('# generated using gen.py, DO NOT USE!\n\n')
    fout.write('raise ImportError("DO NOT USE, this file was generated by gen.py")\n\n')
    for cls in [d for d in dir(mod) if d[0].isupper()]:
        fout.write('class %sMsg(%s):\n\n' % (cls, cls))
        fout.write('    def __init__(self):\n')
        fout.write('        super(%sMsg, self).__init__()\n' % cls)
        fout.write('        raise NotImplementedError("%sMsg is not yet implemented")\n\n' % cls)
    fout.close()
    print "complete, saved to %s" % template_filename

gen(act, 'act.py')
gen(diag, 'diag.py')
gen(geo, 'geo.py')
gen(nav, 'nav.py')
gen(sens, 'sens.py')
gen(std, 'std.py')
gen(vis, 'vis.py')
