# generated using gen.py, DO NOT USE!

raise ImportError("DO NOT USE, this file was generated by gen.py")

class AccelMsg(Accel):

    def __init__(self):
        super(AccelMsg, self).__init__()
        raise NotImplementedError("AccelMsg is not yet implemented")

class AccelStampedMsg(AccelStamped):

    def __init__(self):
        super(AccelStampedMsg, self).__init__()
        raise NotImplementedError("AccelStampedMsg is not yet implemented")

class AccelWithCovarianceMsg(AccelWithCovariance):

    def __init__(self):
        super(AccelWithCovarianceMsg, self).__init__()
        raise NotImplementedError("AccelWithCovarianceMsg is not yet implemented")

class AccelWithCovarianceStampedMsg(AccelWithCovarianceStamped):

    def __init__(self):
        super(AccelWithCovarianceStampedMsg, self).__init__()
        raise NotImplementedError("AccelWithCovarianceStampedMsg is not yet implemented")

class InertiaMsg(Inertia):

    def __init__(self):
        super(InertiaMsg, self).__init__()
        raise NotImplementedError("InertiaMsg is not yet implemented")

class InertiaStampedMsg(InertiaStamped):

    def __init__(self):
        super(InertiaStampedMsg, self).__init__()
        raise NotImplementedError("InertiaStampedMsg is not yet implemented")

class PointMsg(Point):

    def __init__(self):
        super(PointMsg, self).__init__()
        raise NotImplementedError("PointMsg is not yet implemented")

class Point32Msg(Point32):

    def __init__(self):
        super(Point32Msg, self).__init__()
        raise NotImplementedError("Point32Msg is not yet implemented")

class PointStampedMsg(PointStamped):

    def __init__(self):
        super(PointStampedMsg, self).__init__()
        raise NotImplementedError("PointStampedMsg is not yet implemented")

class PolygonMsg(Polygon):

    def __init__(self):
        super(PolygonMsg, self).__init__()
        raise NotImplementedError("PolygonMsg is not yet implemented")

class PolygonStampedMsg(PolygonStamped):

    def __init__(self):
        super(PolygonStampedMsg, self).__init__()
        raise NotImplementedError("PolygonStampedMsg is not yet implemented")

class PoseMsg(Pose):

    def __init__(self):
        super(PoseMsg, self).__init__()
        raise NotImplementedError("PoseMsg is not yet implemented")

class Pose2DMsg(Pose2D):

    def __init__(self):
        super(Pose2DMsg, self).__init__()
        raise NotImplementedError("Pose2DMsg is not yet implemented")

class PoseArrayMsg(PoseArray):

    def __init__(self):
        super(PoseArrayMsg, self).__init__()
        raise NotImplementedError("PoseArrayMsg is not yet implemented")

class PoseStampedMsg(PoseStamped):

    def __init__(self):
        super(PoseStampedMsg, self).__init__()
        raise NotImplementedError("PoseStampedMsg is not yet implemented")

class PoseWithCovarianceMsg(PoseWithCovariance):

    def __init__(self):
        super(PoseWithCovarianceMsg, self).__init__()
        raise NotImplementedError("PoseWithCovarianceMsg is not yet implemented")

class PoseWithCovarianceStampedMsg(PoseWithCovarianceStamped):

    def __init__(self):
        super(PoseWithCovarianceStampedMsg, self).__init__()
        raise NotImplementedError("PoseWithCovarianceStampedMsg is not yet implemented")

class QuaternionMsg(Quaternion):

    def __init__(self):
        super(QuaternionMsg, self).__init__()
        raise NotImplementedError("QuaternionMsg is not yet implemented")

class QuaternionStampedMsg(QuaternionStamped):

    def __init__(self):
        super(QuaternionStampedMsg, self).__init__()
        raise NotImplementedError("QuaternionStampedMsg is not yet implemented")

class TransformMsg(Transform):

    def __init__(self):
        super(TransformMsg, self).__init__()
        raise NotImplementedError("TransformMsg is not yet implemented")

class TransformStampedMsg(TransformStamped):

    def __init__(self):
        super(TransformStampedMsg, self).__init__()
        raise NotImplementedError("TransformStampedMsg is not yet implemented")

class TwistMsg(Twist):

    def __init__(self):
        super(TwistMsg, self).__init__()
        raise NotImplementedError("TwistMsg is not yet implemented")

class TwistStampedMsg(TwistStamped):

    def __init__(self):
        super(TwistStampedMsg, self).__init__()
        raise NotImplementedError("TwistStampedMsg is not yet implemented")

class TwistWithCovarianceMsg(TwistWithCovariance):

    def __init__(self):
        super(TwistWithCovarianceMsg, self).__init__()
        raise NotImplementedError("TwistWithCovarianceMsg is not yet implemented")

class TwistWithCovarianceStampedMsg(TwistWithCovarianceStamped):

    def __init__(self):
        super(TwistWithCovarianceStampedMsg, self).__init__()
        raise NotImplementedError("TwistWithCovarianceStampedMsg is not yet implemented")

class Vector3Msg(Vector3):

    def __init__(self):
        super(Vector3Msg, self).__init__()
        raise NotImplementedError("Vector3Msg is not yet implemented")

class Vector3StampedMsg(Vector3Stamped):

    def __init__(self):
        super(Vector3StampedMsg, self).__init__()
        raise NotImplementedError("Vector3StampedMsg is not yet implemented")

class WrenchMsg(Wrench):

    def __init__(self):
        super(WrenchMsg, self).__init__()
        raise NotImplementedError("WrenchMsg is not yet implemented")

class WrenchStampedMsg(WrenchStamped):

    def __init__(self):
        super(WrenchStampedMsg, self).__init__()
        raise NotImplementedError("WrenchStampedMsg is not yet implemented")

