#!/usr/bin/env python
import rospy
import ros_helper.msgs_api.visualization as vis

class MeshPublisher(object):

	def __init__(self, topic_name, msg):
		self.pub = rospy.Publisher(topic_name, vis.Marker, queue_size=1)
		self.msg = msg

	def update(self, event):
		self.msg.add_time(rospy.Time.now())
		self.pub.publish(msg)

if __name__=='__main__':

	# Init node 
	rospy.init_node('mesh_publisher_node')

	# Grab required parameters
	filename = rospy.get_param('~filename')
	topic_name = rospy.get_param('~topic_name')

	# Grab optional parameters
	if rospy.has_param('~use_embedded_materials'):
		use_embedded_materials = rospy.get_param('~use_embedded_materials')
	else:
		use_embedded_materials = False

	if rospy.has_param('~frame_id'):
		frame_id = rospy.get_param('~frame_id')
	else:
		frame_id = 'world'

	if rospy.has_param('~hz'):
		hz = rospy.get_param('~hz')
	else:
		hz = 50.0

	if rospy.has_param('~scale'):
		scale = rospy.get_param('~scale')
	else:
		scale = (1,1,1)

	if not use_embedded_materials:

		if rospy.has_param('~color'):

			color = rospy.get_param('~color')

			if len(color) == 3:
				color = (color[0], color[1], color[2], 1)
			elif len(color) == 4:
				pass
			else:
				rospy.logwarn('Incorrect color given, defaulting to (0,0,0,1).')
				color = (0,0,0,1)

		else:

			color = (0, 0, 0, 1)

	# Generate message
	msg = vis.MarkerMsg(vis.Marker.MESH_RESOURCE, rospy.Time.now(), frame_id)
	msg.add_scale(scale)
	msg.add_mesh(filename, use_embedded_materials)
	if use_embedded_materials: msg.add_rgba(color)

	# Init timer and spin
	rospy.Timer(rospy.Duration(1.0/hz), MeshPublisher(topic_name, msg).update)
	rospy.spin()