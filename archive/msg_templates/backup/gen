#!/usr/bin/env python
import xml.etree.ElementTree as et

import actionlib_msgs.msg as actionlib
import diagnostic_msgs.msg as diagnostic
import geometry_msgs.msg as geometry
import nav_msgs.msg as nav
import sensor_msgs.msg as sensor
import std_msgs.msg as std
import visualization_msgs.msg as visualization

all_msg_grps = ['actionlib',\
                'diagnostic',\
                'geometry',\
                'nav',\
                'sensor',\
                'std',\
                'visualization']

def load_xml_root(grp):
    return et.parse(grp + '.xml').getroot()

def unique(ls):
    return list(set(ls))

def get_all_type_groups(grp):
    type_groups = []
    for msg_cls_el in load_xml_root(grp):
        for msg_attr_el in msg_cls_el:
            type_groups.append(msg_attr_el.attrib['type_group'])
    type_groups = unique(type_groups)
    type_groups.remove('basic')
    return type_groups

for grp in all_msg_grps:

    fout = open(grp + '.py', 'w')

    # Preamble
    fout.write('from %s_msgs.msgs import *\n' % grp)
    fout.write('from ..utils import *\n')
    for type_group in [type_group for type_group in get_all_type_groups(grp) if type_group != grp]:
        fout.write('from .%s import *\n' % type_group)
    fout.write('\n')

    # Iterate over msg classes
    for msg_cls_el in load_xml_root(grp):

        cls = msg_cls_el.tag

        # Start class
        fout.write('class %sMsg(%s):\n\n' % (cls, cls))

        # Write msg attrs
        fout.write('    MSG_ATTRS = {\\\n')
        for i, msg_attr_el in enumerate(msg_cls_el):
            if msg_attr_el.attrib['type_group'] == 'basic':
                msg_type = msg_attr_el.attrib['type']
            else:
                msg_type = msg_attr_el.attrib['type'] + 'Msg'
            fout.write('                 "%s" : %s\\\n' % (msg_attr_el.tag, msg_type))
        fout.write('    }\n\n')

        # Write init
        fout.write('    def __init__(self, *args, **kwargs):\n')
        fout.write('        super(%sMsg, self).__init__()\n' % cls)
        fout.write('        if len(args) is 1:\n')
        fout.write('            if %s in get_object_class_hierarchy(args[0]):\n' % cls)
        fout.write('                for attr, attr_type in self.MSG_ATTRS.items():\n')
        fout.write('                    setattr(self, attr, attr_type(getattr(args[0], attr)))\n\n')
        fout.write('        for key, value in kwargs.items():\n')




    # Close
    fout.close()
