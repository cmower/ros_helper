#!/usr/bin/env python
import rospy
import numpy as np
import ros_helper.msgs.visualization as vis

class Particle(object):

    def __init__(self, speed, cone_theta):
        self.dt = 1.0/50.0
        self.speed = speed
        self.r = self.t = self.x = self.y = self.z = 0.0
        theta = np.random.uniform(0, cone_theta)
        phi = np.random.uniform(0, 2.0*np.pi)
        self.A = np.sin(theta)*np.cos(phi)
        self.B = np.sin(theta)*np.sin(phi)
        self.C = np.cos(theta)

    def update(self):
        self.t += self.dt
        self.r = self.speed * self.t 
        self.x = self.r*self.A
        self.y = self.r*self.B
        self.z = self.r*self.C

    @property
    def position(self):
        return np.array([self.x, self.y, self.z])
    
class SpraySim(object):

    def __init__(self):

        # Init params, particle list, and ros pub
        self.particle_radius =  rospy.get_param('~particle_radius')
        self.cone_theta = rospy.get_param('~cone_theta') 
        self.cone_radius = rospy.get_param('~cone_radius') 
        self.frame = rospy.get_param('~frame') 
        self.spawn_rate = rospy.get_param('~spawn_rate') 
        self.particle_speed = rospy.get_param('~particle_speed') 
        self.particles = []
        self.particle_pub = rospy.Publisher('spray', vis.SphereListMsg, queue_size=1)
        self.color = (0.8235294117647058, 0.4117647058823529, 0.11764705882352941, 1.0)

        # Set ros timers
        rospy.Timer(rospy.Duration(1.0/50.0), self.publish_particles)
        rospy.Timer(rospy.Duration(1.0/self.spawn_rate), self.spawn_new_particles)
        rospy.Timer(rospy.Duration(1.0/50.0), self.destroy_particles)
        rospy.Timer(rospy.Duration(1.0/50.0), self.update_particles)

        # If user wants also publish cone marker
        if rospy.has_param('~publish_cone_marker'):
            pub_cone = rospy.get_param('~publish_cone_marker')
        else:
            pub_cone = False
        if pub_cone:
            self.cone_pub = rospy.Publisher('cone', vis.StlMeshMsg, queue_size=1)
            rospy.Timer(rospy.Duration(1.0/50.0), self.publish_cone)
            
    def spawn_new_particles(self, event):
        self.particles.append(Particle(self.particle_speed, self.cone_theta))

    def destroy_particles(self, event):
        self.particles = [p for p in self.particles if p.r < self.cone_radius]

    def update_particles(self, event):
        for p in self.particles: p.update()

    def publish_particles(self, event):
        self.particle_pub.publish(vis.SphereListMsg(time = rospy.Time.now(),\
                                                    frame_id = self.frame,\
                                                    points=[p.position for p in self.particles],\
                                                    color = self.color,\
                                                    radius = self.particle_radius))

    def publish_cone(self, event):
        self.cone_pub.publish(vis.StlMeshMsg(filename="package://ros_helper/resources/cone.stl",\
                                             frame_id = self.frame,\
                                             time=rospy.Time.now(),\
                                             color = [1.0, 0.0, 0.0, 0.5],\
                                             scale = [0.5, 0.5, 0.5]))

if __name__=='__main__':
    rospy.init_node('rviz_spray_sim_node')
    SpraySim()
    rospy.spin()
